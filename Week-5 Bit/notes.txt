and &
or |
not ~
xor ^

and(&)
0 0 - 0
0 1 - 0
1 0 - 0
1 1 - 1

or(|)
0 0 - 0
0 1 - 1
1 0 - 1
1 1 - 1

not(~)
0 - 1
1 - 9

xor(^)
0 0 - 0
0 1 - 1
1 0 - 1
1 1 - 0

0000 0000 0000 0000 0000 0000 0000 0010 -> 2

~(2) => ~(0000 0000 0000 0000 0000 0000 0000 0010) => 1111 1111 1111 1111 1111 1111 1111 1101

(1)111 1111 1111 1111 1111 1111 1111 1101 -> 2's complement -> -(0000 0000 0000 0000 0000 0000 0000 0011) => -3

left shit operator

5<<1 = 10
0000....0101 => 0000....01010

3<<2 = 12
0000....0011 => 0000....1100

not necessary that each time *2

suppose
(0100...0010)<<1 => 1000....0100 it becomes a negative number


right shit operator

15>>1 = 7
0000...01111 => 0000...00111 

5>>2 = 1
0000...00101 => 0000...00001

note: padding always by zero if positive number but if negative number then it is compiler dependent
The left shift and right shift operators should not be used for negative numbers. 

Interestingly!! The bitwise OR of two numbers is just the sum of those two numbers if there is no carry involved,
otherwise you just add their bitwise AND. Let’s say, we have a=5(101) and b=2(010),
since there is no carry involved, their sum is just a|b. Now,
if we change ‘a’ to 6 which is 110 in binary, their sum would change to a|b + a&b since there is a carry involved. 


The bitwise XOR operator is the most useful operator from a technical interview perspective.
 It is used in many problems. A simple example could be 
 “Given a set of numbers where all elements occur an even number of times except one number,
 find the odd occurring number” This problem can be efficiently solved by just doing XOR to all numbers. 

