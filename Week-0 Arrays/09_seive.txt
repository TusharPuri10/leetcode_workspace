seive of Eratostheres

n = 40
{} => current
() => marking the multiple of current as non prime
count++ every time we get a prime

1  2  3  4  5  6  7  8  9  10
11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
31 32 33 34 35 36 37 38 39 40

1  {2}  3  (4)  5  (6)  7  (8)  9  (10)
11 (12) 13 (14) 15 (16) 17 (18) 19 (20)
21 (22) 23 (24) 25 (26) 27 (28) 29 (30)
31 (32) 33 (34) 35 (36) 37 (38) 39 (40)


1   2  {3}  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) 25 (26) (27) (28) 29 (30)
31 (32) (33) (34) 35 (36) 37 (38) (39) (40)

1   2   3  (4)  {5}  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  {7}  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
{11} (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) {13} (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) {17} (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) {19} (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) {23} (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) {29} (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
{31} (32) (33) (34) (35) (36) 37 (38) (39) (40)

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) {37} (38) (39) (40)


final

1   2   3  (4)  5  (6)  7  (8)  (9)  (10)
11 (12) 13 (14) (15) (16) 17 (18) 19 (20)
(21) (22) 23 (24) (25) (26) (27) (28) 29 (30)
31 (32) (33) (34) (35) (36) 37 (38) (39) (40)

complexity => n total elements

so first 2 ke multiple mark kare so there will be about n/2 numbers which will be marked in first iteration
n/3 will be marked in second iteration
n/5 will be marked in third iteration
n/7 will be marked in fourth iteration

therefore

n/2 + n/3 + n/5 + n/7 + n/11 .....
n (1/2 + 1/3 + 1/5 + 1/7 + 1/11....)
n * hp of prime numbers...it is through taylor series
O(n*log(log(n)))

CODE:

        if(n==0 || n==1)
            return false;
        vector<bool> v(n,true);
        v[0]=false;
        v[1]=false;
        int count=0;
        for(long i=2;i<n;i++)
        {
            if(v[i]==false)
                continue;
            
            for(long j=i*i;j<n;j=j+i)
                v[j]=false;
            
            ++count;
        }
        return count;


Problems with Simple Sieve:
The Sieve of Eratosthenes looks good,
but consider the situation when n is large,
the Simple Sieve faces the following issues.

1-> An array of size Î˜(n) may not fit in memory

2-> The simple Sieve is not cached friendly even for slightly bigger n.
    The algorithm traverses the array without locality of reference

Segmented seive
https://www.geeksforgeeks.org/segmented-sieve/

Study this!!!
